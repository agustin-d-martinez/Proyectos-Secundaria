// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/08/2018 12:20:28"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    definitivo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module definitivo_vlg_sample_tst(
	on/off,
	s0,
	s1,
	s2,
	s3,
	s4,
	s5,
	s6,
	s7,
	s8,
	s9,
	T1,
	T2,
	T3,
	T4,
	T5,
	T6,
	sampler_tx
);
input  on/off;
input  s0;
input  s1;
input  s2;
input  s3;
input  s4;
input  s5;
input  s6;
input  s7;
input  s8;
input  s9;
input  T1;
input  T2;
input  T3;
input  T4;
input  T5;
input  T6;
output sampler_tx;

reg sample;
time current_time;
always @(on/off or s0 or s1 or s2 or s3 or s4 or s5 or s6 or s7 or s8 or s9 or T1 or T2 or T3 or T4 or T5 or T6)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module definitivo_vlg_check_tst (
	p1,
	p2,
	p3,
	p4,
	puerta,
	sampler_rx
);
input  p1;
input  p2;
input  p3;
input  p4;
input  puerta;
input sampler_rx;

reg  p1_expected;
reg  p2_expected;
reg  p3_expected;
reg  p4_expected;
reg  puerta_expected;

reg  p1_prev;
reg  p2_prev;
reg  p3_prev;
reg  p4_prev;
reg  puerta_prev;

reg  p1_expected_prev;
reg  p2_expected_prev;
reg  p3_expected_prev;
reg  p4_expected_prev;
reg  puerta_expected_prev;

reg  last_p1_exp;
reg  last_p2_exp;
reg  last_p3_exp;
reg  last_p4_exp;
reg  last_puerta_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	p1_prev = p1;
	p2_prev = p2;
	p3_prev = p3;
	p4_prev = p4;
	puerta_prev = puerta;
end

// update expected /o prevs

always @(trigger)
begin
	p1_expected_prev = p1_expected;
	p2_expected_prev = p2_expected;
	p3_expected_prev = p3_expected;
	p4_expected_prev = p4_expected;
	puerta_expected_prev = puerta_expected;
end



// expected p1
initial
begin
	p1_expected = 1'bX;
end 

// expected p2
initial
begin
	p2_expected = 1'bX;
end 

// expected p3
initial
begin
	p3_expected = 1'bX;
end 

// expected p4
initial
begin
	p4_expected = 1'bX;
end 

// expected puerta
initial
begin
	puerta_expected = 1'bX;
end 
// generate trigger
always @(p1_expected or p1 or p2_expected or p2 or p3_expected or p3 or p4_expected or p4 or puerta_expected or puerta)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected p1 = %b | expected p2 = %b | expected p3 = %b | expected p4 = %b | expected puerta = %b | ",p1_expected_prev,p2_expected_prev,p3_expected_prev,p4_expected_prev,puerta_expected_prev);
	$display("| real p1 = %b | real p2 = %b | real p3 = %b | real p4 = %b | real puerta = %b | ",p1_prev,p2_prev,p3_prev,p4_prev,puerta_prev);
`endif
	if (
		( p1_expected_prev !== 1'bx ) && ( p1_prev !== p1_expected_prev )
		&& ((p1_expected_prev !== last_p1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p1_expected_prev);
		$display ("     Real value = %b", p1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_p1_exp = p1_expected_prev;
	end
	if (
		( p2_expected_prev !== 1'bx ) && ( p2_prev !== p2_expected_prev )
		&& ((p2_expected_prev !== last_p2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p2_expected_prev);
		$display ("     Real value = %b", p2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_p2_exp = p2_expected_prev;
	end
	if (
		( p3_expected_prev !== 1'bx ) && ( p3_prev !== p3_expected_prev )
		&& ((p3_expected_prev !== last_p3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p3_expected_prev);
		$display ("     Real value = %b", p3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_p3_exp = p3_expected_prev;
	end
	if (
		( p4_expected_prev !== 1'bx ) && ( p4_prev !== p4_expected_prev )
		&& ((p4_expected_prev !== last_p4_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p4_expected_prev);
		$display ("     Real value = %b", p4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_p4_exp = p4_expected_prev;
	end
	if (
		( puerta_expected_prev !== 1'bx ) && ( puerta_prev !== puerta_expected_prev )
		&& ((puerta_expected_prev !== last_puerta_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port puerta :: @time = %t",  $realtime);
		$display ("     Expected value = %b", puerta_expected_prev);
		$display ("     Real value = %b", puerta_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_puerta_exp = puerta_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module definitivo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg on/off;
reg s0;
reg s1;
reg s2;
reg s3;
reg s4;
reg s5;
reg s6;
reg s7;
reg s8;
reg s9;
reg T1;
reg T2;
reg T3;
reg T4;
reg T5;
reg T6;
// wires                                               
wire p1;
wire p2;
wire p3;
wire p4;
wire puerta;

wire sampler;                             

// assign statements (if any)                          
definitivo i1 (
// port map - connection between master ports and signals/registers   
	.\on/off (on/off),
	.p1(p1),
	.p2(p2),
	.p3(p3),
	.p4(p4),
	.puerta(puerta),
	.s0(s0),
	.s1(s1),
	.s2(s2),
	.s3(s3),
	.s4(s4),
	.s5(s5),
	.s6(s6),
	.s7(s7),
	.s8(s8),
	.s9(s9),
	.T1(T1),
	.T2(T2),
	.T3(T3),
	.T4(T4),
	.T5(T5),
	.T6(T6)
);

// on/off
initial
begin
	on/off = 1'b0;
end 

// s0
initial
begin
	s0 = 1'b0;
end 

// s1
initial
begin
	s1 = 1'b0;
end 

// s2
initial
begin
	s2 = 1'b0;
end 

// s3
initial
begin
	s3 = 1'b0;
end 

// s4
initial
begin
	s4 = 1'b0;
end 

// s5
initial
begin
	s5 = 1'b0;
end 

// s6
initial
begin
	s6 = 1'b0;
end 

// s7
initial
begin
	s7 = 1'b0;
end 

// s8
initial
begin
	s8 = 1'b0;
end 

// s9
initial
begin
	s9 = 1'b0;
end 

// T1
initial
begin
	T1 = 1'b1;
	T1 = #10000 1'b0;
end 

// T2
initial
begin
	T2 = 1'b0;
end 

// T3
initial
begin
	T3 = 1'b0;
end 

// T4
initial
begin
	T4 = 1'b0;
end 

// T5
initial
begin
	T5 = 1'b0;
end 

// T6
initial
begin
	T6 = 1'b0;
end 

definitivo_vlg_sample_tst tb_sample (
	.on/off(on/off),
	.s0(s0),
	.s1(s1),
	.s2(s2),
	.s3(s3),
	.s4(s4),
	.s5(s5),
	.s6(s6),
	.s7(s7),
	.s8(s8),
	.s9(s9),
	.T1(T1),
	.T2(T2),
	.T3(T3),
	.T4(T4),
	.T5(T5),
	.T6(T6),
	.sampler_tx(sampler)
);

definitivo_vlg_check_tst tb_out(
	.p1(p1),
	.p2(p2),
	.p3(p3),
	.p4(p4),
	.puerta(puerta),
	.sampler_rx(sampler)
);
endmodule

